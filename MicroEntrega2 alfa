module MicroEntrega1 where

import Text.Show.Functions
-- microprocesador [posiciones] acumuladorA acumuladorB contador etiqueta
main :: IO ()
main = return ()

--anterior type Instrucciones=[Instruccion]
type Instruccion = Microprocesador->Microprocesador
type Instrucciones = [Instruccion]

--3.1 Punto 1: Modelar micro
data Microprocesador = Microprocesador{ 
posiciones :: [Int],
programa :: Instrucciones,
acumuladorA :: Int,
acumuladorB :: Int,
contador :: Int,
etiqueta:: String} deriving (Show)

xt8088 = Microprocesador {posiciones = [], programa = [] , acumuladorA = 0, acumuladorB = 0, contador = 0, etiqueta = ""}
fp20 = Microprocesador {posiciones = [1..20], programa = [], acumuladorA = 0, acumuladorB = 0, contador = 0, etiqueta = ""}

--unPrograma :: Instrucciones--
--unPrograma unMicro = unMicro--

-- agregar programa
programCounter (Microprocesador posiciones programa acumuladorA acumuladorB contador etiqueta ) = contador
acumulador'A (Microprocesador posiciones programa acumuladorA acumuladorB contador etiqueta ) = acumuladorA
acumulador'B (Microprocesador posiciones programa acumuladorA acumuladorB contador etiqueta ) = acumuladorB
mensajeError (Microprocesador posiciones programa acumuladorA acumuladorB contador etiqueta ) = etiqueta
memoria (Microprocesador posiciones programa acumuladorA acumuladorB contador etiqueta ) = posiciones
programa' (Microprocesador posiciones programa acumuladorA acumuladorB contador etiqueta) = programa

--3.2 Punto 2
{--aumentarPC :: Microprocesador -> Microprocesador
aumentarPc micro = micro {programCounter = ((+1).programCounter) micro }
nop = aumentarPc 
--3.3 Punto 3
lodV (Microprocesador posiciones programa acumuladorA acumuladorB contador etiqueta ) valor  = aumentarPC Microprocesador posiciones programa valor acumuladorB contador etiqueta
--lodV (Microprocesador posiciones acumuladorA acumuladorB contador etiqueta ) valor  = Microprocesador posiciones valor acumuladorB (contador+1) etiqueta
--lodV micro valor = aumentarPc micro {acumuladorA = valor micro}
swap (Microprocesador posiciones programa acumuladorA acumuladorB contador etiqueta )  = aumentarPC Microprocesador posiciones programa acumuladorB acumuladorA contador etiqueta
--swap (Microprocesador posiciones acumuladorA acumuladorB contador etiqueta )  = Microprocesador posiciones acumuladorB acumuladorA (contador+1) etiqueta
add (Microprocesador posiciones programa acumuladorA acumuladorB contador etiqueta ) = aumentarPC Microprocesador posiciones programa (acumuladorA+acumuladorB) 0 contador etiqueta
--add (Microprocesador posiciones acumuladorA acumuladorB contador etiqueta ) = Microprocesador posiciones (acumuladorA+acumuladorB) 0 (contador+1) etiqueta
sumar valor1 valor2 (Microprocesador posiciones programa acumuladorA acumuladorB contador etiqueta ) = add (lodV ((swap ((lodV (Microprocesador  posiciones programa acumuladorA acumuladorB contador etiqueta) valor1 )))) valor2)
-- sumar valor1 valor2 micro = micro {lodV micro valor1}
--3.4 Punto 4

divide (Microprocesador posiciones programa acumuladorA 0 contador _)  = aumentarPC Microprocesador{posiciones=posiciones,programa=programa, acumuladorA=acumuladorA, acumuladorB = 0, contador = contador, etiqueta = "DIVISION BY ZERO"}
divide (Microprocesador posiciones programa acumuladorA acumuladorB contador etiqueta)  = aumentarPC Microprocesador posiciones (div acumuladorA acumuladorB) 0 contador etiqueta
-- divide (Microprocesador posiciones acumuladorA 0 contador _)  = Microprocesador{posiciones=posiciones, acumuladorA=acumuladorA, acumuladorB = 0, contador = (contador+1), etiqueta = "DIVISION BY ZERO"}
-- divide (Microprocesador posiciones acumuladorA acumuladorB contador etiqueta)  = Microprocesador posiciones (div acumuladorA acumuladorB) 0 (contador+1) etiqueta
str (Microprocesador posiciones programa acumuladorA acumuladorB contador etiqueta ) pos valor  = aumentarPC Microprocesador ((take (pos -1) posiciones) ++ [valor] ++ drop pos posiciones) programa acumuladorA 
